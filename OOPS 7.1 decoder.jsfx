// based on vocalrediso.jsfx
// uses some code from https://github.com/Nbickford/REAPERDenoiser

desc: decode OOPS at -pi/6 and 2/3*pi and upmix to 7.1
//tags: processing stereo surround phase fft
//author: Michael Pannekoek

import cookdsp.jsfx-inc

slider1:0<-60,20,0.1>Output volume (dB)
slider2:0<0,1,1{Yes, No}>Remove C and RL/RR from L and R
slider3:0.5<-5,5,0.001>strength at Low Freq
slider4:0.5<-5,5,0.001>strength at High Freq
slider7:1<0.05,2,0.05>Rear width (multiplier)
slider8:90<1,180,0.1>Low Freq phase width (Degrees)
slider9:90<1,180,0.1>High Freq phase width (Degrees)
-slider10:1<0,1,0.05>Attenuate if different volume

in_pin:left input
in_pin:right input
out_pin:L output
out_pin:R output
out_pin:C output
out_pin:LFE output
out_pin:RL output
out_pin:RR output
out_pin:SL output
out_pin:SR output


@slider
// db to dec
amp = 2*10^(slider1/20);
// convert percentage to raw scale factor
lowStrength = slider3;
highstrength = slider4;
phaseWlow = slider8*$pi/180;
phaseWhigh = slider9*$pi/180;
rwmult = 1 / slider7;
// fill strengthBuffer and phaseWBuffer
bandIndex = 0;
loop(SIZE,
	frac = bandIndex/SIZEMINUSONE;
	frac = max(0, min(1, frac));
	// fraction of progress through range [lowBin, highBin)
	strength = lowStrength* (1 - frac) + highStrength * frac;
	strengthBuffer[bandIndex] = 10^strength;
	// precaculate strength (actual value should be positive, so it makes
	// sense to take the power of ten, but only after the
	// linear mapping over the spectrum is done.
	phaseW = phaseWlow * (1 - frac) + phaseWhigh * frac;
	phaseWBuffer[bandIndex] = phaseW;
	// precalculate phase width

	windowBufferIn[bandIndex] = sin($pi*(bandIndex+1/2)/SIZE);
	windowBufferOut[bandIndex] = sin($pi*(bandIndex+1/2)/SIZE);

	bandIndex += 1;
	// next index
);



@init
RLtheta = -$pi/6;
RRtheta = 2*$pi/3;
cosRLtheta = cos(RLtheta);
sinRLtheta = sin(RLtheta);
cosRRtheta = cos(RRtheta);
sinRRtheta = sin(RRtheta);
cosRLthetaSQ = sqr(cosRLtheta);
sinRLthetaSQ = sqr(sinRLtheta);
cosRRthetaSQ = sqr(cosRRtheta);
sinRRthetaSQ = sqr(sinRRtheta);
sin2RLThetaABS = abs(sin(2*RLTheta));
sin2RRThetaABS = abs(sin(2*RRTheta));

cosRLthetaminuspiforths = cos(RLtheta-$pi/4);
cosRLthetapluspiforths = cos(RLtheta+$pi/4);
sinRLthetaminuspiforths = sin(RLtheta-$pi/4);
sinRLthetapluspiforths = sin(RLtheta+$pi/4);
cosRRthetaminuspiforths = cos(RRtheta-$pi/4);
cosRRthetapluspiforths = cos(RRtheta+$pi/4);
sinRRthetaminuspiforths = sin(RRtheta-$pi/4);
sinRRthetapluspiforths = sin(RRtheta+$pi/4);

// init variables
// buffers
// FFT - fft window size (will be constant)
SIZE = 8192;
SIZEMINUSONE = SIZE-1;
DOUBLESIZE = SIZE*2;
HALFSIZE = SIZE/2;
HALFSIZEINV = 2/SIZE;
HALFSIZEMINUSONE = HALFSIZE-1;
// track how many half frames of delay from the start we are
// to mute the first inital buffers


// set each buffer to the offsef from the last to make it easier to move them around
// fft has real and complex values thus is twice as large
bufferFFTIL = 0;
bufferFFTIR = bufferFFTIL+DOUBLESIZE;
bufferFFTOL = bufferFFTIR+DOUBLESIZE;
bufferFFTOR = bufferFFTOL+DOUBLESIZE;
bufferFFTOC = bufferFFTOR+DOUBLESIZE;
bufferFFTORL = bufferFFTOC+DOUBLESIZE;
bufferFFTORR = bufferFFTORL+DOUBLESIZE;
bufferI1L = bufferFFTORR+DOUBLESIZE;
bufferI2L = bufferI1L+SIZE;
bufferI1R = bufferI2L+SIZE;
bufferI2R = bufferI1R+SIZE;
bufferO1L = bufferI2R+SIZE;
bufferO2L = bufferO1L+SIZE;
bufferO1R = bufferO2L+SIZE;
bufferO2R = bufferO1R+SIZE;
bufferO1C = bufferO2R+SIZE;
bufferO2C = bufferO1C+SIZE;
bufferO1RL = bufferO2C+SIZE;
bufferO2RL = bufferO1RL+SIZE;
bufferO1RR = bufferO2RL+SIZE;
bufferO2RR = bufferO1RR+SIZE;
strengthBuffer = bufferO2RR+SIZE;
phaseWBuffer = strengthBuffer+SIZE;
windowBufferIn = phaseWBuffer+SIZE;
windowBufferOut = windowBufferIn+SIZE;
freembuf(windowBufferOut+SIZE);

// samplesCollected tracks the position in the last of the two tiles
// ranges from 0 to (SIZE/2)-1
samplesCollected = 0;


// tell reaper what delay this plugin will introduce,
// so that it can be compensated for
pdc_delay = SIZE;
// delay is one full buffer
pdc_bot_ch = 0; pdc_top_ch = 6;
// which channels are delayed
// (channel number must be greater than or equal to 0,
// but less than 2, so 0 and 1 - LR output).

// Init Cookdsp filters
CBHP1.buthp(70);
LFEBLP1.butlp(70);


@sample
// store raw samples for later storing in input buffer
firstL = spl0;
firstR = spl1;

// that's a lowercase L in spl, not the number 1.
// spl0 corresponds to L, spl1 corresponds to R.

// read input from buffers (or just read from spl if no buffering)

sampleLeft = firstL;
sampleRight = firstR;

// find positions in tile 1 and 2
tilePos1 = samplesCollected + HALFSIZE;
tilePos2 = samplesCollected;

// apply the selected envelope while writing the sample into the tile buffer
// See https://en.wikipedia.org/wiki/Window_function
windowTileIn1 = windowBufferIn[tilePos1];
windowTileIn2 = windowBufferIn[tilePos2];
windowTileOut1 = windowBufferOut[tilePos1];
windowTileOut2 = windowBufferOut[tilePos2];
// windowTile2 has a relationship to the other window tile, so
// it is epressed in this way for accuracy and speed


// find scaling factor to undo scaling caused by windows
outScale = windowTileIn1 * windowTileOut1 + windowTileIn2 * windowTileOut2;

// output samples
outLPart1 = bufferO1L[tilePos1] * windowTileOut1;
outLPart2 = bufferO2L[tilePos2] * windowTileOut2;
outL = (outLPart1 + outLPart2);

outRPart1 = bufferO1R[tilePos1] * windowTileOut1;
outRPart2 = bufferO2R[tilePos2] * windowTileOut2;
outR = (outRPart1 + outRPart2);

outCPart1 = bufferO1C[tilePos1] * windowTileOut1;
outCPart2 = bufferO2C[tilePos2] * windowTileOut2;
outC = (outCPart1 + outCPart2);
outCwet = CBHP1.buthp_do(outC);
outLFE = LFEBLP1.butlp_do(outC);

outRLPart1 = bufferO1RL[tilePos1] * windowTileOut1;
outRLPart2 = bufferO2RL[tilePos2] * windowTileOut2;
outRL = (outRLPart1 + outRLPart2);

outRRPart1 = bufferO1RR[tilePos1] * windowTileOut1;
outRRPart2 = bufferO2RR[tilePos2] * windowTileOut2;
outRR = (outRRPart1 + outRRPart2);

// output audio
spl0 = amp * outL;
spl1 = amp * outR;
spl2 += amp * outCwet;
spl3 += amp * outLFE;
spl4 += amp * outRL;
spl5 += amp * outRR;
spl6 += amp * (outRL + outL) * 0.5;
spl7 += amp * (outRR + outR) * 0.5;

// write to input tile buffers:
// Left + Right input buffers
bufferI1L[tilePos1] = sampleLeft * windowTileIn1;
bufferI2L[tilePos2] = sampleLeft * windowTileIn2;
bufferI1R[tilePos1] = sampleRight * windowTileIn1;
bufferI2R[tilePos2] = sampleRight * windowTileIn2;

// increment positions
samplesCollected += 1;

// once we reach the end of a tile:
samplesCollected >= HALFSIZE ?
(
	samplesCollected = 0;
	// wrap back to 0 on the tile

	// fill input FFT buffers
	// Loop over each of the audio samples, from index = 0 to SIZE - 1.
	index = 0;
	loop(SIZE,
		// divide by HALFSIZE because applying the FFT and IFFT adds a factor of SIZE
		// and filtering out the negative frequencies adds a factor of 1/2
		bufferFFTIL[2 * index + 0] = bufferI1L[index] * HALFSIZEINV; // real
		bufferFFTIL[2 * index + 1] = 0.0; // imaginary
		bufferFFTIR[2 * index + 0] = bufferI1R[index] * HALFSIZEINV; // real
		bufferFFTIR[2 * index + 1] = 0.0; // imaginary
		index += 1;
		// Next index
	);
	// calculate fft in place for L
	// size specifies the number of bins
	// (one complex number for each bin)
	fft(bufferFFTIL, SIZE);
	// need to permute the frequency bins to get them in the right order
	// See https://www.reaper.fm/sdk/js/advfunc.php#js_advanced for more info.
	fft_permute(bufferFFTIL, SIZE);

	// calculate fft in place for R
	// size specifies the number of bins
	// (one complex number for each bin)
	fft(bufferFFTIR, SIZE);
	// need to permute the frequency bins to get them in the right order
	// See https://www.reaper.fm/sdk/js/advfunc.php#js_advanced for more info.
	fft_permute(bufferFFTIR, SIZE);

	//////BAND 0
	// just add together samples, phase information is meaningless
	Lreal = bufferFFTIL[0];
	Limag = bufferFFTIL[1];
	Rreal = bufferFFTIR[0];
	Rimag = bufferFFTIR[1];

	// fill output FFT buffers
	bufferFFTOL[0] = Lreal*0.5;
	bufferFFTOL[1] = Limag*0.5;
	bufferFFTOR[0] = Rreal*0.5;
	bufferFFTOR[1] = Rimag*0.5;
	bufferFFTOC[0] = (Lreal + Rreal)*0.25;
	bufferFFTOC[1] = (Limag + Rimag)*0.25;
	bufferFFTORL[0] = (Lreal*cosRLtheta + Rreal*sinRLtheta)*0.5;
	bufferFFTORL[1] = (Limag*cosRLtheta + Rimag*sinRLtheta)*0.5;
	bufferFFTORR[0] = (Lreal*cosRRtheta + Rreal*sinRRtheta)*0.5;
	bufferFFTORR[1] = (Limag*cosRRtheta + Rimag*sinRRtheta)*0.5;

	//////BANDS 1 to SIZE/2-2
	bandIndex = 1;
	bandReal = 2;
	bandImag = 3;
	loop(HALFSIZE-1,
		// get dry fft coefficeients
		Lreal = bufferFFTIL[bandReal];
		Limag = bufferFFTIL[bandImag];
		Rreal = bufferFFTIR[bandReal];
		Rimag = bufferFFTIR[bandImag];
		
		Ldot = sqr(Lreal) + sqr(Limag);
		Rdot = sqr(Rreal) + sqr(Rimag);
		Lnorm = sqrt(Ldot);
		Rnorm = sqrt(Rdot);

		strength = strengthBuffer[bandIndex];
		// get strength
		phaseW = phaseWBuffer[bandIndex];
		// get phase width
		
		thetaC = atan2(Lreal, Limag)-atan2(Rreal, Rimag);
		thetaC < -$pi ? thetaC += 2*$pi;
		thetaC > $pi ? thetaC -= 2*$pi;

		//// C

		//normL = sqrt(sqr(Lreal) + sqr(Limag));
		//normR = sqrt(sqr(Rreal) + sqr(Rimag));
		//normprod = normL * normR;
		//cosineval = Lreal * Rreal + Limag * Rimag;
		//cosnorm = cosineval / normprod;
		
		
		uncapped = abs(thetaC) / phaseW * rwmult;
		weightC1 = min(1, uncapped);
		weightC2 = 1 - (weightC1 ^ strength);
		// attenuate if relative norms are very different, and option enabled
		attenC = (2*Lnorm*Rnorm/(Ldot+Rdot));
		weightC = weightC2 * attenC ^ (strength * slider10);

		// calculate and attenuate centre fft
		// should divide by 2 here because two things are added together
		Creal = (Lreal + Rreal) * weightC * 0.5;
		Cimag = (Limag + Rimag) * weightC * 0.5;


		//// RL
		RLreal1 = Lreal*cosRLthetaminuspiforths + Rreal*sinRLthetaminuspiforths;
		RLimag1 = Limag*cosRLthetaminuspiforths + Rimag*sinRLthetaminuspiforths;

		RLreal2 = Lreal*cosRLthetapluspiforths + Rreal*sinRLthetapluspiforths;
		RLimag2 = Limag*cosRLthetapluspiforths + Rimag*sinRLthetapluspiforths;

		//norm1 = sqrt(sqr(RLreal1) + sqr(RLimag1));
		//norm2 = sqrt(sqr(RLreal2) + sqr(RLimag2));
		//normprod = norm1 * norm2;
		//cosineval = RLreal1 * RLreal2 + RLimag1 * RLimag2;
		//cosnorm = cosineval / normprod;
		theta = atan2(RLreal1, RLimag1)-atan2(RLreal2, RLimag2);
		theta < -$pi ? theta += 2*$pi;
		theta > $pi ? theta -= 2*$pi;
		uncapped = abs(theta) / phaseW * rwmult;
		weightRL1 = min(1, uncapped);
		weightRL2 = 1 - (weightRL1 ^ strength);
		// attenuate if relative norms are very different, and option enabled
		attenRL = (sin2RLThetaABS*Lnorm*Rnorm/(sinRLthetaSQ*Ldot+cosRLthetaSQ*Rdot));
		weightRL = weightRL2 * attenRL ^ (strength * slider10);

		// calculate and attenuate RL fft
		RLreal = (Lreal*cosRLtheta + Rreal*sinRLtheta)*weightRL;
		RLimag = (Limag*cosRLtheta + Rimag*sinRLtheta)*weightRL;
		// this is RL shifted by j (90 degrees phase)

		//// RR
		RRreal1 = Lreal*cosRRthetaminuspiforths + Rreal*sinRRthetaminuspiforths;
		RRimag1 = Limag*cosRRthetaminuspiforths + Rimag*sinRRthetaminuspiforths;

		RRreal2 = Lreal*cosRRthetapluspiforths + Rreal*sinRRthetapluspiforths;
		RRimag2 = Limag*cosRRthetapluspiforths + Rimag*sinRRthetapluspiforths;

		//norm1 = sqrt(sqr(RRreal1) + sqr(RRimag1));
		//norm2 = sqrt(sqr(RRreal2) + sqr(RRimag2));
		//normprod = norm1 * norm2;
		//cosineval = RRreal1 * RRreal2 + RRimag1 * RRimag2;
		//cosnorm = cosineval / normprod;
		theta =  atan2(RRreal1, RRimag1)-atan2(RRreal2, RRimag2);;
		theta < -$pi ? theta += 2*$pi;
		theta > $pi ? theta -= 2*$pi;
		uncapped = abs(theta) / phaseW * rwmult;
		weightRR1 = min(1, uncapped);
		weightRR2 = 1 - (weightRR1 ^ strength);
		// attenuate if relative norms are very different, and option enabled
		attenRR = (sin2RRThetaABS*Lnorm*Rnorm/(sinRRthetaSQ*Ldot+cosRRthetaSQ*Rdot));
		weightRR = weightRR2 * attenRR ^ (strength * slider10);

		// calculate and attenuate RR fft
		RRreal = (Lreal*cosRRtheta + Rreal*sinRRtheta)*weightRR;
		RRimag = (Limag*cosRRtheta + Rimag*sinRRtheta)*weightRR;
		// this is RR shifted by k (-90 degrees phase)

		slider2 == 0 ? (
			// remove center from L
			Lreal -= Creal;
			Limag -= Cimag;
			// remove center from R
			Rreal -= Creal;
			Rimag -= Cimag;

			// remove RL from L
			Lreal -= cosRLtheta*RLreal;
			Limag -= cosRLtheta*RLimag;
			// remove RL from  R
			Rreal -= sinRLtheta*RLreal;
			Rimag -= sinRLtheta*RLimag;

			// remove RR from L
			Lreal -= cosRRtheta*RRreal;
			Limag -= cosRRtheta*RRimag;
			// remove RR from R
			Rreal -= sinRRtheta*RRreal;
			Rimag -= sinRRtheta*RRimag;
		);

		// fill output fft buffers
		// because all bands from SIZE/2 onwards are 0
		// the hilbert will be in the imaginary part of theinverse FFT results
		// but need to scale coefficeients by 2
		bufferFFTOL[bandReal] = Lreal;
		bufferFFTOL[bandImag] = Limag;
		bufferFFTOR[bandReal] = Rreal;
		bufferFFTOR[bandImag] = Rimag;
		bufferFFTOC[bandReal] = Creal;
		bufferFFTOC[bandImag] = Cimag;
		bufferFFTORL[bandReal] = RLreal;
		bufferFFTORL[bandImag] = RLimag;
		bufferFFTORR[bandReal] = RRreal;
		bufferFFTORR[bandImag] = RRimag;
		bandReal += 2;
		bandImag += 2;
	);

	////// BAND SIZE/2
	bandIndex = HALFSIZE;
	// just add together samples, phase information is meaningless
	Lreal = bufferFFTIL[bandIndex * 2];
	Limag = bufferFFTIL[bandIndex * 2 + 1];
	Rreal = bufferFFTIR[bandIndex * 2];
	Rimag = bufferFFTIR[bandIndex * 2 + 1];

	// fill output FFT buffers
	bufferFFTOL[bandIndex * 2] = Lreal*0.5;
	bufferFFTOL[bandIndex * 2 + 1] = Limag*0.5;
	bufferFFTOR[bandIndex * 2] = Rreal*0.5;
	bufferFFTOR[bandIndex * 2 + 1] = Rimag*0.5;
	bufferFFTOC[bandIndex * 2] = (Lreal + Rreal)*0.25;
	bufferFFTOC[bandIndex * 2 + 1] = (Limag + Rimag)*0.25;
	bufferFFTORL[bandIndex * 2] = (Lreal*cosRLtheta + Rreal*sinRLtheta)*0.5;
	bufferFFTORL[bandIndex * 2 + 1] = (Limag*cosRLtheta + Rimag*sinRLtheta)*0.5;
	bufferFFTORR[bandIndex * 2] = (Lreal*cosRRtheta + Rreal*sinRRtheta)*0.5;
	bufferFFTORR[bandIndex * 2 + 1] = (Limag*cosRRtheta + Rimag*sinRRtheta)*0.5;

	// BANDS SIZE/2 to SIZE-1
	memset(bufferFFTOL+SIZE+2, 0, SIZE-2);
	memset(bufferFFTOR+SIZE+2, 0, SIZE-2);
	memset(bufferFFTOC+SIZE+2, 0, SIZE-2);
	memset(bufferFFTORL+SIZE+2, 0, SIZE-2);
	memset(bufferFFTORR+SIZE+2, 0, SIZE-2);

	// apply ifft to FFTOL
	fft_ipermute(bufferFFTOL, SIZE);
	ifft(bufferFFTOL, SIZE);

	// apply ifft to FFTOR
	fft_ipermute(bufferFFTOR, SIZE);
	ifft(bufferFFTOR, SIZE);

	// apply ifft to FFTOC
	fft_ipermute(bufferFFTOC, SIZE);
	ifft(bufferFFTOC, SIZE);

	// apply ifft to FFTORL
	fft_ipermute(bufferFFTORL, SIZE);
	ifft(bufferFFTORL, SIZE);

	// apply ifft to FFTORR
	fft_ipermute(bufferFFTORR, SIZE);
	ifft(bufferFFTORR, SIZE);

	// Copy from the complex numbers in bufferFFTO* to the bufferO1* tile:
	index = 0;
	loop(SIZE,
		// take real part
		bufferO1L[index] = bufferFFTOL[2 * index];
		bufferO1R[index] = bufferFFTOR[2 * index];
		bufferO1C[index] = bufferFFTOC[2 * index];
		// RL and RR have had hilbert applied
		// take the - 90 degree shift to compensate
		bufferO1RL[index] = -bufferFFTORL[2 * index + 1];
		bufferO1RR[index] = bufferFFTORR[2 * index + 1];
		index += 1;
	);

	// finally, swap tiles
	temp = bufferI1L;
	bufferI1L = bufferI2L;
	bufferI2L = temp;

	temp = bufferI1R;
	bufferI1R = bufferI2R;
	bufferI2R = temp;

	temp = bufferO1L;
	bufferO1L = bufferO2L;
	bufferO2L = temp;

	temp = bufferO1R;
	bufferO1R = bufferO2R;
	bufferO2R = temp;

	temp = bufferO1C;
	bufferO1C = bufferO2C;
	bufferO2C = temp;

	temp = bufferO1RL;
	bufferO1RL = bufferO2RL;
	bufferO2RL = temp;

	temp = bufferO1RR;
	bufferO1RR = bufferO2RR;
	bufferO2RR = temp;
);

// sliders are serialized automatically
// thus nothing to serialize, as nothing else makes sense to store
