desc: IIR filter bank envelope based upmixer

import cookdsp.jsfx-inc

slider1:stren=0.25<0,3,0.005>strength
slider2:avg_ms=0.5<1,700,1>Averaging (ms)
slider3:gdb=0<-120,20,1>Gain (db)
slider4:rear_b=0<-12,12,0.1>Rear boost (db)
slider5:fron_b=0<-12,12,0.1>Front boost (db)
slider6:cent_b=0<-12,12,0.1>Centre boost (db)
slider7:rw=1<0,4,0.01>Rear width
slider8:fw=1<0,4,0.01>font width
slider9:cw=1<0,4,0.01>center width

@slider
strength = exp(stren);
avg = exp(-2*$pi*1000/avg_ms/srate);
g = dbToGain(gdb);
rb = dbToGain(rear_b);
fb = dbToGain(fron_b);
cb = dbToGain(cent_b);

@init
bandpow = 4;
bands = 2^bandpow;
Lbands = memalloc(2*bands);
Rbands = memalloc(2*bands);
top_frac = min(0.45, 20000/srate);
bot_frac = 20/srate;
// 32 resulting bands and the space
// for intermediary results
// *1 1 2 4 8 16 32 64
// (index 0 unused)
function dbToGain(dB)
(
    10^(dB/20)
);
// delays to help isolate the residue
fY1_L = memalloc(bands);
fY1_R = memalloc(bands);
fY1_RL = memalloc(bands);
fY1_RR = memalloc(bands);
fY1_C = memalloc(bands);
fY1_res_L = 0;
fY1_res_R = 0;
fY1_res_RL = 0;
fY1_res_RR = 0;
fY1_res_C = 0;

function rotate(L R cosval sinval)
(
    L*cosval + R*sinval;
);

function get_correction_factor(pos, neg, strength, old, c) (
    pos != 0 || neg != 0 ? (
        temp_ = 1;//max(0, min(1, 1+abs(pos)-2*abs(neg)))^strength;
        temp_ += (old - temp_) * c;
    ) : (
        old;
    );
);

// overrid for function vocoder_do(signal excite)
// directly accesses voco_L and voco_R
function process_sample()
(    
    c_ = 0;
    output_L_ = 0;
    output_R_ = 0;
    output_RL_ = 0;
    output_RR_ = 0;
    output_C_ = 0;
    loop(bands,
        // Analysis
        anal_L = Lbands[bands+c_];
        anal_R = Rbands[bands+c_];
        
        // Synthesis
        // Envelope generation and following:
        L1 = rotate(anal_L, anal_R, cosLtheta, sinLtheta);
        L2 = rotate(anal_L, anal_R, cosLtheta2, sinLtheta2);
        R1 = rotate(anal_L, anal_R, cosRtheta, sinRtheta);
        R2 = rotate(anal_L, anal_R, cosRtheta2, sinRtheta2);
        RL1 = rotate(anal_L, anal_R, cosRLtheta, sinRLtheta);
        RL2 = rotate(anal_L, anal_R, cosRLtheta2, sinRLtheta2);
        RR1 = rotate(anal_L, anal_R, cosRRtheta, sinRRtheta);
        RR2 = rotate(anal_L, anal_R, cosRRtheta2, sinRRtheta2);
        C1 = rotate(anal_L, anal_R, cosCtheta, sinCtheta);
        C2 = rotate(anal_L, anal_R, cosCtheta2, sinCtheta2);
        
        
        fY1_L[c_] = get_correction_factor(L1, L2, strength*fw, fY1_L[c_], avg);
        fY1_R[c_] = get_correction_factor(R1, R2, strength*fw, fY1_R[c_], avg);
        fY1_RL[c_] = get_correction_factor(RL1, RL2, strength*rw, fY1_RL[c_], avg);
        fY1_RR[c_] = get_correction_factor(RR1, RR2, strength*rw, fY1_RR[c_], avg);
        fY1_C[c_] = get_correction_factor(C1, C2, strength*cw, fY1_C[c_], avg);
        
        // Output accumulator
        output_L_ += L1 * fY1_L[c_];
        output_R_ += R1 * fY1_R[c_];
        output_RL_ += RL1 * fY1_RL[c_];
        output_RR_ += RR1 * fY1_RR[c_];
        output_C_ += C1 * fY1_C[c_];
        c_ += 1;
    );
);

Ltheta = 0;
Ltheta2 = -$pi/2;
Rtheta = $pi/2;
Rtheta2 = 0;
RLtheta = -$pi/6;
RLtheta2 = -$pi/6-$pi/2;
RRtheta = 2*$pi/3;
RRtheta2 = 2*$pi/3-$pi/2;
Ctheta = $pi/4;
Ctheta2 = $pi/4-$pi/2;

cosLtheta = cos(Ltheta);
sinLtheta = sin(Ltheta);
cosRtheta = cos(Rtheta);
sinRtheta = sin(Rtheta);
cosLtheta2 = cos(Ltheta2);
sinLtheta2 = sin(Ltheta2);
cosRtheta2 = cos(Rtheta2);
sinRtheta2 = sin(Rtheta2);
cosRLtheta = cos(RLtheta);
sinRLtheta = sin(RLtheta);
cosRRtheta = cos(RRtheta);
sinRRtheta = sin(RRtheta);
cosRLtheta2 = cos(RLtheta2);
sinRLtheta2 = sin(RLtheta2);
cosRRtheta2 = cos(RRtheta2);
sinRRtheta2 = sin(RRtheta2);
cosCtheta = cos(Ctheta);
sinCtheta = sin(Ctheta);
cosCtheta2 = cos(Ctheta2);
sinCtheta2 = sin(Ctheta2);


@sample
L = spl0;
R = spl1;
Lbands[1] = L;
Rbands[1] = R;
bc = 1;
loop(bandpow,
    bi = bc;
    fi = 1;
    loop(bc,
        frac1 = (fi / bc / 2);
        frac = bot_frac * (top_frac/bot_frac) ^ frac1;
        coeff = exp(-2*$pi*frac);
        Lbands[2*bi] = Lbands[bi] + (Lbands[2*bi] - Lbands[bi]) * coeff;
        Rbands[2*bi] = Rbands[bi] + (Rbands[2*bi] - Rbands[bi]) * coeff;
        Lbands[2*bi+1] = Lbands[bi] - Lbands[2*bi];
        Rbands[2*bi+1] = Rbands[bi] - Rbands[2*bi];
        bi += 1;
        fi += 2;
    );
    bc *= 2;
);

process_sample();

spl0 = g * output_L_ * fb;
spl1 = g * output_R_ * fb;
spl2 = g * output_C_ * cb;
spl3 = g * output_C_ * cb;
spl4 = g * output_RL_ * rb;
spl5 = g * output_RR_ * rb;
