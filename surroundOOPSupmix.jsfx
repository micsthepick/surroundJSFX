// based on vocalrediso.jsfx
// uses some code from https://github.com/Nbickford/REAPERDenoiser

desc: decode matrixed channels with better seperation
//tags: processing stereo surround phase fft
//author: Michael Pannekoek

import cookdsp.jsfx-inc

slider1:-0.4<-60,20,0.1>Output volume (dB)
//slider2:0<0,1,1{Yes, No}>Remove C and RL/RR from L and R
slider3:0<-5,5,0.001>strength at Low Freq
slider4:0<-5,5,0.001>strength at High Freq
slider5:0<-180, 180, 5>rear tuning
slider7:1<0.05,10,0.05>Front&&Rear narrowness
//slider8:90<1,180,0.1>Low Freq phase width (Degrees)
//slider9:90<1,180,0.1>High Freq phase width (Degrees)

in_pin:left input
in_pin:right input
out_pin:L output
out_pin:R output
out_pin:C output
out_pin:LFE output
out_pin:RL output
out_pin:RR output


@slider
// let amp be slider1 converted from dB to linear
amp = 10^(slider1/20);

// assign slider3 and slider4 to lowstrength and highstrength respectively
lowStrength = slider3;
highstrength = slider4;

// assign slider8 and slider9 to phaseWlow and phaseWhigh,
// converting from degrees to radians, respectively.
phaseWlow = slider8*$pi/180;
phaseWhigh = slider9*$pi/180;
rwmult = slider7;
// fill strengthBuffer and phaseWBuffer
bandIndex = 0;
loop(SIZE,
	// let frac be equal to the ratio of bandIndex to SIZEMINUSONE
	frac = bandIndex/SIZEMINUSONE;
	frac = max(0, min(1, frac));
	// fraction of progress through range [lowBin, highBin)
	strength = lowStrength * (1 - frac) + highStrength * frac;
	strengthBuffer[bandIndex] = 10^strength;
	// precaculate strength (actual value should be positive, so it makes
	// sense to take the power of ten, but only after the
	// linear mapping over the spectrum is done.
	phaseW = phaseWlow * (1 - frac) + phaseWhigh * frac;
	phaseWBuffer[bandIndex] = phaseW;
	// precalculate phase width

	windowBufferIn[bandIndex] = sin($pi*(bandIndex+1/2)/SIZE);
	windowBufferOut[bandIndex] = sin($pi*(bandIndex+1/2)/SIZE);

	bandIndex += 1;
	// next index
);

tuning = slider5*$pi/180; 

Ltheta = 0;
Ltheta2 = 0-$pi/2;
Rtheta = $pi/2;
Rtheta2 = 0;
RLtheta = -$pi/9+tuning;
RLtheta2 = -$pi/9-$pi/2+tuning;
RRtheta = 11*$pi/18-tuning;
RRtheta2 = 11*$pi/18-$pi/2-tuning;
Ctheta = $pi/4;
Ctheta2 = $pi/4-$pi/2;

// pre-calculate the cosine and sin of the angles
cosLtheta = cos(Ltheta);
sinLtheta = sin(Ltheta);
cosRtheta = cos(Rtheta);
sinRtheta = sin(Rtheta);
cosLtheta2 = cos(Ltheta2);
sinLtheta2 = sin(Ltheta2);
cosRtheta2 = cos(Rtheta2);
sinRtheta2 = sin(Rtheta2);
cosRLtheta = cos(RLtheta);
sinRLtheta = sin(RLtheta);
cosRRtheta = cos(RRtheta);
sinRRtheta = sin(RRtheta);
cosRLtheta2 = cos(RLtheta2);
sinRLtheta2 = sin(RLtheta2);
cosRRtheta2 = cos(RRtheta2);
sinRRtheta2 = sin(RRtheta2);
cosCtheta = cos(Ctheta);
sinCtheta = sin(Ctheta);
cosCtheta2 = cos(Ctheta2);
sinCtheta2 = sin(Ctheta2);


@init

// init variables
// buffers
// FFT - fft window size (will be constant)
SIZE = 8192;
SIZEMINUSONE = SIZE-1;
DOUBLESIZE = SIZE*2;
HALFSIZE = SIZE/2;
HALFSIZEINV = 2/SIZE;
HALFSIZEMINUSONE = HALFSIZE-1;

// let there be two frames of silence
// to mute the first inital buffers
silence = 2;

// set each buffer to the offsef from the last to make it easier to move them around
// fft has real and complex values thus is twice as large
// bufferFFTIL, bufferFFTIR, bufferFFTOL, bufferFFTOR, bufferFFTOC, bufferFFTORL, bufferFFORR are all DOUBLESIZE in length (vecause they hold complex numbers)
bufferFFTIL = 0;
bufferFFTIR = bufferFFTIL+DOUBLESIZE;
bufferFFTOL = bufferFFTIR+DOUBLESIZE;
bufferFFTOR = bufferFFTOL+DOUBLESIZE;
bufferFFTOC = bufferFFTOR+DOUBLESIZE;
bufferFFTORL = bufferFFTOC+DOUBLESIZE;
bufferFFTORR = bufferFFTORL+DOUBLESIZE;
// bufferI1L, bufferI2L, bufferI1R, bufferI2R, bufferO1L, bufferO2L, bufferO1R, bufferO2R, bufferO1C, bufferO2C, bufferO1RL, bufferO2RL, bufferO1RR, bufferO2RR are all SIZE lin length
bufferI1L = bufferFFTORR+DOUBLESIZE;
bufferI2L = bufferI1L+SIZE;
bufferI1R = bufferI2L+SIZE;
bufferI2R = bufferI1R+SIZE;
bufferO1L = bufferI2R+SIZE;
bufferO2L = bufferO1L+SIZE;
bufferO1R = bufferO2L+SIZE;
bufferO2R = bufferO1R+SIZE;
bufferO1C = bufferO2R+SIZE;
bufferO2C = bufferO1C+SIZE;
bufferO1RL = bufferO2C+SIZE;
bufferO2RL = bufferO1RL+SIZE;
bufferO1RR = bufferO2RL+SIZE;
bufferO2RR = bufferO1RR+SIZE;
// strengthBuffer, phaseWBuffer, windowBufferIn, windowBufferOut are all SIZE in length
strengthBuffer = bufferO2RR+SIZE;
phaseWBuffer = strengthBuffer+SIZE;
windowBufferIn = phaseWBuffer+SIZE;
windowBufferOut = windowBufferIn+SIZE;
// now freembuf the memory past the end of windowBufferOut
freembuf(windowBufferOut+SIZE);

// samplesCollected tracks the position in the last of the two tiles, starting from 0
samplesCollected = 0;
// ranges from 0 to (SIZE/2)-1

// tell reaper what delay this plugin will introduce,
// so that it can be compensated for
// delay is one full buffer (length SIZE)
pdc_delay = SIZE;
// the channels from 0 inclusive to 8 (not inclusive) are delayed
pdc_bot_ch = 0; pdc_top_ch = 8;

// Init Cookdsp filters
// (a buthp for CBHP1 with argument 70, and butlp for LFELP1 with argument 70)
CBHP1.buthp(70);
LFEBLP1.butlp(70);


@sample
// store raw samples for later storing in input buffer
firstL = spl0;
firstR = spl1;

// that's a lowercase L in spl, not the number 1.
// spl0 corresponds to L, spl1 corresponds to R.

// read input from buffers (or just read from spl if no buffering)

sampleLeft = firstL;
sampleRight = firstR;

// find positions in tile 1 and 2
tilePos1 = samplesCollected + HALFSIZE;
tilePos2 = samplesCollected;

// apply the selected envelope while writing the sample into the tile buffer
// See https://en.wikipedia.org/wiki/Window_function
windowTileIn1 = windowBufferIn[tilePos1];
windowTileIn2 = windowBufferIn[tilePos2];
windowTileOut1 = windowBufferOut[tilePos1];
windowTileOut2 = windowBufferOut[tilePos2];
// windowTile2 has a relationship to the other window tile, so
// it is epressed in this way for accuracy and speed


// find scaling factor to undo scaling caused by windows
outScale = windowTileIn1 * windowTileOut1 + windowTileIn2 * windowTileOut2;

// output samples
outLPart1 = bufferO1L[tilePos1] * windowTileOut1;
outLPart2 = bufferO2L[tilePos2] * windowTileOut2;
outL = (outLPart1 + outLPart2);

outRPart1 = bufferO1R[tilePos1] * windowTileOut1;
outRPart2 = bufferO2R[tilePos2] * windowTileOut2;
outR = (outRPart1 + outRPart2);

outCPart1 = bufferO1C[tilePos1] * windowTileOut1;
outCPart2 = bufferO2C[tilePos2] * windowTileOut2;
outC = (outCPart1 + outCPart2);
outCwet = CBHP1.buthp_do(outC);
outLFE = LFEBLP1.butlp_do(outC);

outRLPart1 = bufferO1RL[tilePos1] * windowTileOut1;
outRLPart2 = bufferO2RL[tilePos2] * windowTileOut2;
outRL = (outRLPart1 + outRLPart2);

outRRPart1 = bufferO1RR[tilePos1] * windowTileOut1;
outRRPart2 = bufferO2RR[tilePos2] * windowTileOut2;
outRR = (outRRPart1 + outRRPart2);

// output audio
spl0 = amp * outL;
spl1 = amp * outR;
spl2 = amp * outCwet;
spl3 = amp * outLFE;
spl4 = amp * outRL;
spl5 = amp * outRR;

// write to input tile buffers:
// Left + Right input buffers
bufferI1L[tilePos1] = sampleLeft * windowTileIn1;
bufferI2L[tilePos2] = sampleLeft * windowTileIn2;
bufferI1R[tilePos1] = sampleRight * windowTileIn1;
bufferI2R[tilePos2] = sampleRight * windowTileIn2;

// increment positions
samplesCollected += 1;

function get_values(Lreal, Limag, Rreal, Rimag, c1, s1, c2, s2, strength) (
  r1 = Lreal*c1 + Rreal*s1;
  i1 = Limag*c1 + Rimag*s1;
  r2 = Lreal*c2 + Rreal*s2;
  i2 = Limag*c2 + Rimag*s2;
  // Lnorm = sqrt(sqr(Lreal) + sqr(Limag));
  // Rnorm = sqrt(sqr(Rreal) + sqr(Rimag));
  // not needed?
  // atan2(r1*r2+i1*i2, r2*i1-r1*i2);
  weight = sqr(r1) + sqr(i1);
  weight = weight / (weight + sqr(r2) + sqr(i2));
  weight = weight ^ strength;
  
  OutR = r1 * weight;
  OutI = i1 * weight;
);

// once we reach the end of a tile:
samplesCollected >= HALFSIZE ?
(
	// wrap back to 0 on the tile
	samplesCollected = 0;

	// make silence go to 0
	silence > 0 ? silence -= 1;

	// fill input FFT buffers
	// Loop over each of the audio samples, from index = 0 to SIZE - 1.
	index = 0;
	loop(SIZE,
		// divide by HALFSIZE because applying the FFT and IFFT adds a factor of SIZE
		// and filtering out the negative frequencies adds a factor of 1/2
		bufferFFTIL[2 * index + 0] = bufferI1L[index] * HALFSIZEINV; // real
		bufferFFTIL[2 * index + 1] = 0.0; // imaginary
		bufferFFTIR[2 * index + 0] = bufferI1R[index] * HALFSIZEINV; // real
		bufferFFTIR[2 * index + 1] = 0.0; // imaginary
		index += 1;
		// Next index
	);
	// calculate fft in place for L
	// size specifies the number of bins
	// (one complex number for each bin)
	fft(bufferFFTIL, SIZE);
	// need to permute the frequency bins to get them in the right order
	// See https://www.reaper.fm/sdk/js/advfunc.php#js_advanced for more info.
	fft_permute(bufferFFTIL, SIZE);

	// calculate fft in place for R
	// size specifies the number of bins
	// (one complex number for each bin)
	fft(bufferFFTIR, SIZE);
	// need to permute the frequency bins to get them in the right order
	// See https://www.reaper.fm/sdk/js/advfunc.php#js_advanced for more info.
	fft_permute(bufferFFTIR, SIZE);

	//////BAND 0
	// just add together samples, phase information is meaningless
	Lreal = bufferFFTIL[0];
	Limag = bufferFFTIL[1];
	Rreal = bufferFFTIR[0];
	Rimag = bufferFFTIR[1];

	// fill output FFT buffers
	bufferFFTOL[0] = Lreal*0.5;
	bufferFFTOL[1] = Limag*0.5;
	bufferFFTOR[0] = Rreal*0.5;
	bufferFFTOR[1] = Rimag*0.5;
	bufferFFTOC[0] = (Lreal + Rreal)*0.25;
	bufferFFTOC[1] = (Limag + Rimag)*0.25;
	bufferFFTORL[0] = (Lreal*cosRLtheta + Rreal*sinRLtheta)*0.5;
	bufferFFTORL[1] = (Limag*cosRLtheta + Rimag*sinRLtheta)*0.5;
	bufferFFTORR[0] = (Lreal*cosRRtheta + Rreal*sinRRtheta)*0.5;
	bufferFFTORR[1] = (Limag*cosRRtheta + Rimag*sinRRtheta)*0.5;

	//////BANDS 1 to SIZE/2-2
	bandIndex = 1;
	loop(HALFSIZE-1,
		strength = strengthBuffer[bandIndex]; 
		
		// get dry fft coefficeients
		Lreal = bufferFFTIL[bandReal];
		Limag = bufferFFTIL[bandImag];
		Rreal = bufferFFTIR[bandReal];
		Rimag = bufferFFTIR[bandImag];
		
		
		// get C Out
		get_values(Lreal, Limag, Rreal, Rimag, cosCtheta, sinCtheta, cosCtheta2, sinCtheta2, strength);
		
		CrealOut = OutR*0.5;
		CimagOut = outI*0.5;
		
		
		// get L Out
		get_values(Lreal, Limag, Rreal, Rimag, cosLtheta, sinLtheta, cosLtheta2, sinLtheta2, strength*rwmult);
		
		LrealOut = OutR;
		LimagOut = outI;
		
		
		// get R out
		get_values(Lreal, Limag, Rreal, Rimag, cosRtheta, sinRtheta, cosRtheta2, sinRtheta2, strength*rwmult);
		
		RrealOut = OutR;
		RimagOut = outI;
		
		
		// RL
		get_values(Lreal, Limag, Rreal, Rimag, cosRLtheta, sinRLtheta, cosRLtheta2, sinRLtheta2, strength*rwmult);
		
		RLrealOut = OutR*0.5;
		RLimagOut = outI*0.5;
		
		
		//// RR
		get_values(Lreal, Limag, Rreal, Rimag, cosRRtheta, sinRRtheta, cosRRtheta2, sinRRtheta2, strength*rwmult);
		
		RRrealOut = OutR*0.5;
		RRimagOut = outI*0.5;
		
		
		// fill output fft buffers
		// because all bands from SIZE/2 onwards are 0
		// the hilbert will be in the imaginary part of the inverse FFT results
		// but need to scale coefficeients by 2
		bufferFFTOL[bandReal] = LrealOut;
		bufferFFTOL[bandImag] = LimagOut;
		bufferFFTOR[bandReal] = RrealOut;
		bufferFFTOR[bandImag] = RimagOut;
		bufferFFTOC[bandReal] = CrealOut;
		bufferFFTOC[bandImag] = CimagOut;
		bufferFFTORL[bandReal] = RLrealOut;
		bufferFFTORL[bandImag] = RLimagOut;
		bufferFFTORR[bandReal] = RRrealOut;
		bufferFFTORR[bandImag] = RRimagOut;
		bandReal += 2;
		bandImag += 2;
	);

	////// BAND SIZE/2
	bandIndex = HALFSIZE;
	// just add together samples, phase information is meaningless
	Lreal = bufferFFTIL[bandIndex * 2];
	Limag = bufferFFTIL[bandIndex * 2 + 1];
	Rreal = bufferFFTIR[bandIndex * 2];
	Rimag = bufferFFTIR[bandIndex * 2 + 1];

	// fill output FFT buffers
	bufferFFTOL[bandIndex * 2] = Lreal*0.5;
	bufferFFTOL[bandIndex * 2 + 1] = Limag*0.5;
	bufferFFTOR[bandIndex * 2] = Rreal*0.5;
	bufferFFTOR[bandIndex * 2 + 1] = Rimag*0.5;
	bufferFFTOC[bandIndex * 2] = (Lreal + Rreal)*0.25;
	bufferFFTOC[bandIndex * 2 + 1] = (Limag + Rimag)*0.25;
	bufferFFTORL[bandIndex * 2] = (Lreal*cosRLtheta + Rreal*sinRLtheta)*0.5;
	bufferFFTORL[bandIndex * 2 + 1] = (Limag*cosRLtheta + Rimag*sinRLtheta)*0.5;
	bufferFFTORR[bandIndex * 2] = (Lreal*cosRRtheta + Rreal*sinRRtheta)*0.5;
	bufferFFTORR[bandIndex * 2 + 1] = (Limag*cosRRtheta + Rimag*sinRRtheta)*0.5;

	// BANDS SIZE/2 to SIZE-1
	memset(bufferFFTOL+SIZE+2, 0, SIZE-2);
	memset(bufferFFTOR+SIZE+2, 0, SIZE-2);
	memset(bufferFFTOC+SIZE+2, 0, SIZE-2);
	memset(bufferFFTORL+SIZE+2, 0, SIZE-2);
	memset(bufferFFTORR+SIZE+2, 0, SIZE-2);

	// apply ifft to FFTOL
	fft_ipermute(bufferFFTOL, SIZE);
	ifft(bufferFFTOL, SIZE);

	// apply ifft to FFTOR
	fft_ipermute(bufferFFTOR, SIZE);
	ifft(bufferFFTOR, SIZE);

	// apply ifft to FFTOC
	fft_ipermute(bufferFFTOC, SIZE);
	ifft(bufferFFTOC, SIZE);

	// apply ifft to FFTORL
	fft_ipermute(bufferFFTORL, SIZE);
	ifft(bufferFFTORL, SIZE);

	// apply ifft to FFTORR
	fft_ipermute(bufferFFTORR, SIZE);
	ifft(bufferFFTORR, SIZE);

	// Copy from the complex numbers in bufferFFTO* to the bufferO1* tile:
	index = 0;
	loop(SIZE,
		// take real part
		bufferO1L[index] = bufferFFTOL[2 * index];
		bufferO1R[index] = bufferFFTOR[2 * index];
		bufferO1C[index] = bufferFFTOC[2 * index];
		// RL and RR have had hilbert applied
		// take the - 90 degree shift to compensate
		bufferO1RL[index] = -bufferFFTORL[2 * index + 1];
		bufferO1RR[index] = bufferFFTORR[2 * index + 1];
		index += 1;
	);

	// finally, swap tiles
	temp = bufferI1L;
	bufferI1L = bufferI2L;
	bufferI2L = temp;

	temp = bufferI1R;
	bufferI1R = bufferI2R;
	bufferI2R = temp;

	temp = bufferO1L;
	bufferO1L = bufferO2L;
	bufferO2L = temp;

	temp = bufferO1R;
	bufferO1R = bufferO2R;
	bufferO2R = temp;

	temp = bufferO1C;
	bufferO1C = bufferO2C;
	bufferO2C = temp;

	temp = bufferO1RL;
	bufferO1RL = bufferO2RL;
	bufferO2RL = temp;

	temp = bufferO1RR;
	bufferO1RR = bufferO2RR;
	bufferO2RR = temp;
);

// sliders are serialized automatically
// thus nothing to serialize, as nothing else makes sense to store
